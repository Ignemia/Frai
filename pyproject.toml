[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "frai"
dynamic = ["version"]
description = "AI-powered chat and image generation system"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.12"
authors = [
    {name = "Personal Chatter Team"}
]
keywords = [
    "ai",
    "chat",
    "image-generation",
    "machine-learning",
    "diffusion",
    "llm"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.27.0",
    "diffusers>=0.14.0",
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.21.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=1.10.0",
    "python-dotenv>=1.0.0",
    "requests>=2.28.0",
    "pillow>=9.0.0",
    "numpy>=1.24.0",
    "psutil>=5.9.0"
]

[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "factory-boy>=3.2.0",
    "faker>=18.0.0",
    "responses>=0.23.0",
    "freezegun>=1.2.0",
    "memory-profiler>=0.60.0"
]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "ipdb>=0.13.13",
    "jupyter>=1.0.0"
]
all = [
    "personal-chatter[test,dev]"
]

[project.urls]
Homepage = "https://github.com/your-org/personal-chatter"
Documentation = "https://personal-chatter.readthedocs.io"
Repository = "https://github.com/your-org/personal-chatter.git"
"Bug Tracker" = "https://github.com/your-org/personal-chatter/issues"
Changelog = "https://github.com/your-org/personal-chatter/blob/main/CHANGELOG.md"

[project.scripts]
personal-chatter = "main:main"
personal-chatter-tests = "tests.test_orchestrator:main"

[tool.hatch.version]
source = "vcs"
fallback-version = "0.1.0"

[tool.hatch.build.targets.wheel]
packages = ["src/personal_chatter", "api", "services"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | models  # Exclude model directories
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/migrations/*", "*/models/*"]

# Ruff configuration (fast Python linter)
[tool.ruff]
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "A",   # flake8-builtins
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate (remove commented code)
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "PLR0913", # too many arguments to function call
    "PLR0915", # too many statements
    "RET504",  # unnecessary variable assignment before return
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "models/",  # Exclude model directories
]
target-version = "py38"

[tool.ruff.per-file-ignores]
"tests/**" = ["T20", "PLR2004", "S101", "ARG"]  # Allow prints and asserts in tests
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"conftest.py" = ["F401", "ARG"]

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "diffusers.*",
    "PIL.*",
    "numpy.*",
    "cv2.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--junitxml=junit.xml"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "blackbox: marks tests as blackbox/end-to-end tests",
    "smoke: marks tests as smoke tests",
    "benchmark: marks tests as benchmark tests",
    "stress: marks tests as stress tests",
    "gpu: marks tests that require GPU",
    "model: marks tests that require model files",
    "network: marks tests that require network access"
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src", "api", "services"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/migrations/*",
    "*/models/*",  # Exclude downloaded models
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "models"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection in tests

# Commitizen configuration for conventional commits
[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version"
]
