name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - performance
          - security
          - quick
      run_deployment:
        description: 'Deploy after successful tests'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.12'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-flight checks
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      should_run_tests: ${{ steps.changes.outputs.should_run }}
      test_type: ${{ steps.test-type.outputs.type }}
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for relevant changes
      id: changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          code:
            - 'src/**'
            - 'api/**'
            - 'services/**'
            - 'tests/**'
            - 'requirements*.txt'
            - 'setup.py'
            - 'pyproject.toml'
            - '.github/workflows/**'

    - name: Determine test type
      id: test-type
      run: |
        if [[ "${{ github.event.inputs.test_type }}" != "" ]]; then
          echo "type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "schedule" ]]; then
          echo "type=all" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.changes.outputs.code }}" == "true" ]]; then
          echo "type=all" >> $GITHUB_OUTPUT
        else
          echo "type=quick" >> $GITHUB_OUTPUT
        fi

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "release" ]]; then
          echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
        else
          echo "version=dev-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        fi

  # Code quality and security checks
  quality-checks:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should_run_tests == 'true' || github.event_name == 'schedule' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt
    
    - name: Run pre-commit hooks
      run: |
        pre-commit install --install-hooks
        pre-commit run --all-files --show-diff-on-failure
      continue-on-error: true
    
    - name: Check code formatting with Black
      run: |
        black --check --diff . || (echo "Code formatting issues found. Run 'black .' to fix." && exit 1)
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || (echo "Import sorting issues found. Run 'isort .' to fix." && exit 1)
    
    - name: Lint with Ruff
      run: |
        ruff check . --output-format=github
    
    - name: Type checking with mypy
      run: |
        mypy api/ services/ --ignore-missing-imports --no-strict-optional --show-error-codes
      continue-on-error: true
    
    - name: Security check with bandit
      run: |
        bandit -r api/ services/ -ll -f json -o bandit-report.json || true
        bandit -r api/ services/ -ll || true
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        safety check || true
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json        retention-days: 30

  # Main test suite
  test:
    runs-on: ${{ matrix.os }}
    needs: [pre-flight, quality-checks]
    if: needs.pre-flight.outputs.should_run_tests == 'true' || github.event_name == 'schedule' || github.event_name == 'release'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/torch
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgl1-mesa-glx \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libgtk-3-0 \
          libgdk-pixbuf2.0-0 \
          ffmpeg

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libomp ffmpeg
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install ffmpeg -y
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-mock pytest-benchmark
        pip install psutil memory_profiler pytest-timeout pytest-sugar
        
        if [ -f requirements.txt ] || [ -e requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-test.txt ] || [ -e requirements-test.txt ]; then pip install -r requirements-test.txt; fi
      shell: bash
      if: matrix.os != 'windows-latest'
      
    - name: Install Python dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-mock pytest-benchmark
        pip install psutil memory_profiler pytest-timeout pytest-sugar
        
        if (Test-Path "requirements.txt") { pip install -r requirements.txt }
        if (Test-Path "requirements-test.txt") { pip install -r requirements-test.txt }
      shell: pwsh
    
    - name: Install package in development mode
      run: |
        pip install -e .
      continue-on-error: true
    
    - name: Create test results directory
      run: |
        mkdir -p test-results
      shell: bash
    
    - name: Run unit tests
      if: needs.pre-flight.outputs.test_type == 'all' || needs.pre-flight.outputs.test_type == 'unit' || needs.pre-flight.outputs.test_type == 'quick'
      run: |
        pytest tests/unit/ -v --cov=api --cov=services --cov-report=xml --cov-report=html --junitxml=junit/test-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
    
    - name: Run integration tests
      if: needs.pre-flight.outputs.test_type == 'all' || needs.pre-flight.outputs.test_type == 'integration'
      run: |
        pytest tests/integration/ -v --junitxml=junit/integration-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
    
    - name: Run implementation tests
      if: needs.pre-flight.outputs.test_type == 'all'
      run: |
        pytest tests/implementation/ -v --junitxml=junit/implementation-results-${{ matrix.os }}-${{ matrix.python-version }}.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit/
          htmlcov/
          coverage.xml
        retention-days: 30
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Performance tests
  performance:
    runs-on: ubuntu-latest
    needs: [pre-flight, test]
    if: (needs.pre-flight.outputs.test_type == 'all' || needs.pre-flight.outputs.test_type == 'performance') && github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-benchmark memory_profiler
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-json=benchmark.json
      timeout-minutes: 30
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 30

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.test_type == 'all' || needs.pre-flight.outputs.test_type == 'security' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Run Bandit security scanner
      run: |
        pip install bandit
        bandit -r api/ services/ -f sarif -o bandit-results.sarif || true
    
    - name: Upload Bandit scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-results.sarif
        category: "bandit"

  # Documentation build
  docs:
    runs-on: ubuntu-latest
    needs: pre-flight
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Build documentation
      run: |
        if [ -d "docs" ]; then
          cd docs
          make html
        else
          echo "No docs directory found, generating basic docs..."
          mkdir -p docs
          sphinx-quickstart -q -p "Personal Chatter" -a "Team" -v "0.1" docs/
          cd docs
          make html
        fi
      continue-on-error: true
    
    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html
        retention-days: 30

  # Build and push Docker image
  build-image:
    runs-on: ubuntu-latest
    needs: [test, quality-checks]
    if: github.event_name == 'release' || (github.ref == 'refs/heads/main' && github.event_name == 'push')
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Release deployment
  deploy:
    runs-on: ubuntu-latest
    needs: [test, performance, security, build-image]
    if: github.event_name == 'release' || (github.event.inputs.run_deployment == 'true' && github.ref == 'refs/heads/main')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying version ${{ needs.pre-flight.outputs.version }} to production"
        # Add your deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production"
        # Add your smoke test commands here
    
    - name: Create deployment status
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentId = process.env.GITHUB_RUN_ID;
          try {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: 'success',
              description: 'Deployment successful',
              environment_url: 'https://your-app-url.com'
            });
            console.log("Created deployment status successfully");
          } catch (error) {
            console.log("Error creating deployment status:", error);
          }

  # Workflow summary
  summary:
    runs-on: ubuntu-latest
    needs: [pre-flight, quality-checks, test, performance, security, docs, build-image, deploy]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Status by Job" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-flight**: ${{ needs.pre-flight.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Checks**: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance**: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Documentation**: ${{ needs.docs.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build**: ${{ needs.build-image.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment**: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Type**: ${{ needs.pre-flight.outputs.test_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.pre-flight.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered By**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch/Tag**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
